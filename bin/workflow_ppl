#!/usr/bin/env python

### importing packages
import argparse
import os
import sys
import pandas as pd
import pickle

### importing egrm
from egrm import *

### parse arguments
parser=argparse.ArgumentParser()

parser.add_argument('--out', type = str, help='output directory')
parser.add_argument('--name', type = str, help='output file name')
parser.add_argument('--chunk', type = int, help='chunk number')
parser.add_argument('--l', type = int, help='chromosome length')
parser.add_argument('--N', type = int, help='population size')
parser.add_argument('--mutation_rate', type = float, help='mutation rate')
parser.add_argument('--recomb_rate', type = float, help='recombination rate')
parser.add_argument('--cas_ratio', type = float, help='M_cas / M')
parser.add_argument('--obs_ratio', type = float, help='M_obs / M_5')
parser.add_argument('--h2g', type = float, help='heritability')
parser.add_argument('--Alpha', type = float, help='Alpha -- causal probability parameter')
parser.add_argument('--Beta', type = float, help='Beta -- observation probability parameter')

args = vars(parser.parse_args())
args = dict((k,v) for k,v in args.items() if v is not None)

out = args.pop("out")
if not os.path.exists(out):
  os.mkdir(out)
os.chdir(out)

name = args.pop("name")
i = args.pop("chunk", None)

def print_results(string):
  out_file = open(name, "a")
  out_file.write(str(string) + "\n")
  out_file.close()

def print_logs(string):
  out_file = open(name + ".log", "a")
  out_file.write(str(string) + "\n")
  out_file.close()

def chunks(l, n): 
  for i in range(0, len(l), n):  
    yield l[i:i + n] 

if i == None:
  ### mainline data
  print_results(args)
  
  print_logs("simulating ...")
  simulation = simulate(**args)
  make_diploid(simulation)
  trees = simulation["hapdata"].pop("tree_sequence")
  
  pickle.dump(simulation, open("{}.p".format(name), "wb"))
  trees.dump("{}.trees".format(name))
  
  ### chunks data
  obss = simulation["observations"]["obss"]
  obss_chunks = list(chunks(obss, 2000))
  n = len(obss_chunks)
  
  os.mkdir(name + "_chunks")
  os.chdir(name + "_chunks")
  for i in range(n):
    pickle.dump(obss_chunks[i], open("obss_chunk{}.p".format(i + 1), "wb"))
  
  os.chdir("..")
  sys.exit(0)

'''
N = simulation["hapdata"]["N"]
M = simulation["hapdata"]["M"]
variants = simulation["hapdata"]["variants"]
M_cas = simulation["phenotypes"]["M_cas"]
M_obs = simulation["observations"]["M_obs"]
M_5 = simulation["observations"]["M_5"]
cass = simulation["phenotypes"]["cass"]
obss = simulation["observations"]["obss"]

Z_cas = simulation["phenotypes"]["Z_cas"]
Z_obs = simulation["observations"]["Z_obs"]
K_cas = np.dot(Z_cas, np.transpose(Z_cas)) / Z_cas.shape[1]
K_obs = np.dot(Z_obs, np.transpose(Z_obs)) / Z_obs.shape[1]
N = Z_cas.shape[0]
y = simulation["phenotypes"]["y"]
'''

### parallelized computing
simulation = pickle.load(open("{}.p".format(name), "rb"))
trees = read_trees("{}.trees".format(name))
simulation["hapdata"]["tree_sequence"] = trees

os.chdir(name + "_chunks")
obss = pickle.load(open("obss_chunk{}.p".format(i), "rb"))
chunk_name = "observed_chunk" + str(i)

variants = simulation["hapdata"]["variants"]
flags_obs = get_flags(trees, variants[obss], file = open(chunk_name + ".log", "a"))
Km, Km_tl = getEK_trees(trees, flags_obs, file = open(chunk_name + ".log", "a"))

os.mkdir(chunk_name + "_relate")
os.chdir(chunk_name + "_relate")
write_relate(simulation, obss, chunk_name)
relate(chunk_name, chunk_name + ".log")
trees_relate = read_trees(chunk_name + ".trees")
Km_relate, Km_relate_tl = getEK_trees(trees_relate, file = open(chunk_name + ".log", "a"))

os.chdir("..")
write_grm(Km, Km_tl, chunk_name + "_Km")
write_grm(Km_relate, Km_relate_tl, chunk_name + "_Km_relate")


