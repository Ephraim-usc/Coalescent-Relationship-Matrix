#!/usr/bin/env python

### importing packages
import argparse
import os
import numpy as np
import pandas as pd
import pickle
import datetime
import tsinfer
import tsdate
import math
import msprime
import tskit
from egrm import varGRM_C, mTMRCA_C, mTMRCA, gmTMRCA, hmTMRCA

### ad-hoc functions ###
def remove_monomorphic(trees):
  tables = trees.tables
  tables.sites.clear()
  tables.mutations.clear()
  n = trees.num_samples
  for tree in trees.trees():
     for site in tree.sites():
        visited = False
        for mutation in site.mutations:
           k = tree.num_samples(mutation.node)
           if k > 0 and k < n:
               if not visited:
                   visited = True
                   site_id = tables.sites.add_row(site.position, site.ancestral_state, metadata=site.metadata)
               tables.mutations.add_row(site_id, mutation.node, mutation.derived_state, parent=-1, metadata=None)
  tables.compute_mutation_parents()
  return tables.tree_sequence()

def getX(trees, idx):
  N = trees.num_samples
  M = idx.shape[0]
  X = np.zeros((N, M)).astype("int")
  i = 0; num = 0
  for v in trees.variants():
    if i in idx:
      X[:, num] = v.genotypes; num += 1
    i += 1
  return X

def getK(trees, idx):
  N = trees.num_samples
  M = idx.shape[0]
  K_all = np.zeros((N, N))
  for idx_ in np.split(idx, range(1000, M, 1000)):
    Z = getX(trees, idx_).astype("float")
    Z -= Z.mean(axis=0); Z /= Z.std(axis=0)
    K_all += np.dot(Z, np.transpose(Z))
    del Z
  K_all /= M
  return K_all


### parse arguments ###
parser=argparse.ArgumentParser()

# name of simulation
parser.add_argument('--name', type = str, help='output file name')

# workflow control
parser.add_argument('--all', help='run all steps', action='store_true')
parser.add_argument('--relate', help='run relate tree reconstruction', action='store_true')
parser.add_argument('--tsinfer', help='run tsinfer tree reconstruction', action='store_true')
parser.add_argument('--mtmrca', help='compute mean TMRCA', action='store_true')
parser.add_argument('--impute', help='compute K_imputed', action='store_true')

# population structure arguments
parser.add_argument('--demo', type = int, help='demography model')
parser.add_argument('--l', type = int, help='chromosome length')
parser.add_argument('--N', type = int, help='total sample size')
parser.add_argument('--n', type = int, help='sample size of each population')
parser.add_argument('--nrow', type = int, help='number of rows of populations')
parser.add_argument('--ncol', type = int, help='number of columns of populations')

parser.add_argument('--pop_ref', type = int, help='from which population the reference panel is sampled')
parser.add_argument('--N_ref', type = int, help='reference panel sample size')

# genetics arguments
parser.add_argument('--mutation_rate', type = float, help='mutation rate')
parser.add_argument('--recomb_rate', type = float, help='recombination rate')
parser.add_argument('--cas_ratio', type = float, help='M_cas / M')
parser.add_argument('--obs_ratio', type = float, help='M_obs / M_5')
parser.add_argument('--h2g', type = float, help='heritability')
parser.add_argument('--Alpha', type = float, help='Alpha -- causal probability parameter')
parser.add_argument('--Beta', type = float, help='Beta -- observation probability parameter')

args = vars(parser.parse_args())
args = dict((k,v) for k,v in args.items() if v is not None)

name = args.pop("name")
os.system("rm -r -f " + name + " && mkdir " + name)
os.chdir(name)

run_all = args.pop("all")
run_relate = args.pop("relate")
run_tsinfer = args.pop("tsinfer")
run_mtmrca = args.pop("mtmrca")
run_impute = args.pop("impute")

if run_all:
  run_relate = True
  run_tsinfer = True
  run_mtmrca = True
  run_impute = True

if args.keys() >= {'N', 'nrow', 'ncol'}:
  args['n'] = int(args['N'] /args['nrow'] / args['ncol'])

if args.keys() >= {'n', 'nrow', 'ncol'}:
  args['N'] = args['n'] * args['nrow'] * args['ncol']

### default arguments ###
demo = args.get("demo", "ooa")
l = args.get("l", 32000000)
N = args.get("N", 1000)
mutation_rate = args.get("mutation_rate", 1e-8)
recomb_rate = args.get("recomb_rate", 1e-8)
cas_ratio = args.get("cas_ratio", 0.1)
obs_ratio = args.get("obs_ratio", 0.2)
h2g = args.get("h2g", 1.0)
Alpha = args.get("Alpha", -1)
Beta = args.get("Beta", 1)

N_ref = args.get("N_ref", 0)


### simulate tree sequence ###
N_B = 2100
N_EU0 = 1000
N_AF = 12300
N_A = 7300
r_EU = 0.004
generation_time = 25
T_EU_AS = 21.2e3 / generation_time
T_B = 140e3 / generation_time
T_AF = 220e3 / generation_time
N_EU = N_EU0 / math.exp(-r_EU * T_EU_AS)
