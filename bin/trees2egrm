#!/usr/bin/env python

### importing packages
import argparse
import math
import numpy as np
import pandas as pd
import tskit

### importing egrm
from egrm import varGRM, varGRM_C, Gmap

### parse arguments
parser=argparse.ArgumentParser()
parser.add_argument('--input', '--i', type = str, help='input file prefix')
parser.add_argument('--output', '--o', default = None, type = str, help='output file prefix')
parser.add_argument('--c_extension', '--c', help='acceleration by C extension', action='store_true')

parser.add_argument('--skip_first_tree', '--sft', help='discard the first tree in the tree sequence', action='store_true')
parser.add_argument('--run_var', '--var', help='compute varGRM instead of eGRM', action='store_true')
parser.add_argument('--genetic_map', '--map', type = str, default = None, help='map file fullname')

parser.add_argument('--left', '--l', type = int, default = 0, help='leftmost genomic position to be included')
parser.add_argument('--right', '--r', type = int, default = math.inf, help='rightmost genomic position to be included')
parser.add_argument('--rlim', type = float, default = 0, help='most recent time limit')
parser.add_argument('--alim', type = float, default = math.inf, help='most ancient time limit')

args = vars(parser.parse_args())
locals().update(args)

if output == None:
  output = input + ".egrm"

### 
trees = tskit.load(input + ".trees")
gmap = Gmap(genetic_map)

if c_extension == True:
  egrm, vargrm, egrm_mu = varGRM_C(trees, log = None, rlim = rlim, alim = alim, left = left, right = right, gmap = gmap, var = run_var, sft = skip_first_tree)
else:
  egrm, vargrm, egrm_mu = varGRM(trees, log = None, rlim = rlim, alim = alim, left = left, right = right, gmap = gmap, var = run_var, sft = skip_first_tree)

np.save(output + ".npy", egrm)
np.save(output + "_mu.npy", egrm_mu)
if run_var == True:
  np.save(output + "_var.npy", vargrm)
