#!/usr/bin/env python

### importing packages
import argparse
import math

### importing egrm
from egrm import varGRM, varGRM_C, read_trees, write_grm, gmap

### parse arguments
parser=argparse.ArgumentParser()
parser.add_argument('--input', '--i', type = str, help='input file prefix')
parser.add_argument('--output', '--o', default = None, type = str, help='output file prefix')
parser.add_argument('--format', '--f', default = "pickle", type = str, help='format of output')
parser.add_argument('--c_extension', '--c', help='acceleration by C extension', action='store_true')

parser.add_argument('--skip_first_tree', '--sft', help='discard the first tree in the tree sequence', action='store_true')
parser.add_argument('--run_var', '--var', help='compute varGRM instead of eGRM', action='store_true')
parser.add_argument('--genetic_map', '--map', type = str, default = None, help='map file fullname')

parser.add_argument('--left', '--l', type = int, default = None, help='leftmost genomic position to be included')
parser.add_argument('--right', '--r', type = int, default = None, help='rightmost genomic position to be included')
parser.add_argument('--A', type = float, default = math.inf, help='most ancient time limit')
parser.add_argument('--B', type = float, default = 0, help='most recent time limit')

args = vars(parser.parse_args())
locals().update(args)

if output == None:
  output = input + ".egrm"

### 
trees = read_trees(input + ".trees")

if left != None and right != None:
  left = max(0, left)
  right = min(trees.sequence_length, right)
  trees = trees.keep_intervals([[left, right]], simplify=False)

if c_extension == True:
  egrm, vargrm, egrm_tl = varGRM_C(trees, file = None, A = A, B = B, map_func = gmap(genetic_map), var = run_var, sft = skip_first_tree)
else:
  egrm, vargrm, egrm_tl = varGRM(trees, file = None, A = A, B = B, map_func = gmap(genetic_map), var = run_var, sft = skip_first_tree)

write_grm(egrm, egrm_tl, output, format)
if run_var == True:
  write_grm(vargrm, egrm_tl, output + "_var", format)



