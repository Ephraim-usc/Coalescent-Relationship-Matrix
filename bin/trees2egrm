#!/usr/bin/env python

### importing packages
import argparse
import math
import numpy as np

### importing egrm
from egrm import varGRM, varGRM_C

### read map file into gmap callable object
class read_gmap:
  def __init__(self, filename):
    if filename is None:
      self.mapped = False
      return
    self.table = pd.read_csv(filename, sep = None, engine = 'python')
    self.pos = self.table.iloc[:, 0].astype(int)
    self.gpos = self.table.iloc[:, 2].astype(float) * 1e6
    self.max = self.table.shape[0]
    self.i = 0
    self.mapped = True
  
  def __call__(self, pos):
    if self.mapped == False:
      return pos
    while (self.i > 0 and pos < self.pos[self.i - 1]):
      self.i -= 1
    while (self.i < self.max and pos > self.pos[self.i]):
      self.i += 1
    if self.i == 0:
      return 0
    if self.i >= self.max:
      return self.gpos[self.max - 1]
    A = pos - self.pos[self.i-1]
    B = (self.gpos[self.i] - self.gpos[self.i-1])/(self.pos[self.i] - self.pos[self.i-1])
    C = self.gpos[self.i-1]
    return A*B + C

### parse arguments
parser=argparse.ArgumentParser()
parser.add_argument('--input', '--i', type = str, help='input file prefix')
parser.add_argument('--output', '--o', default = None, type = str, help='output file prefix')
parser.add_argument('--c_extension', '--c', help='acceleration by C extension', action='store_true')

parser.add_argument('--skip_first_tree', '--sft', help='discard the first tree in the tree sequence', action='store_true')
parser.add_argument('--run_var', '--var', help='compute varGRM instead of eGRM', action='store_true')
parser.add_argument('--genetic_map', '--map', type = str, default = None, help='map file fullname')

parser.add_argument('--left', '--l', type = int, default = None, help='leftmost genomic position to be included')
parser.add_argument('--right', '--r', type = int, default = None, help='rightmost genomic position to be included')
parser.add_argument('--rlim', type = float, default = 0, help='most recent time limit')
parser.add_argument('--alim', type = float, default = math.inf, help='most ancient time limit')

args = vars(parser.parse_args())
locals().update(args)

if output == None:
  output = input + ".egrm"

### 
trees = read_trees(input + ".trees")
gmap = read_gmap(genetic_map)

if left != None and right != None:
  left = max(0, left)
  right = min(trees.sequence_length, right)
  trees = trees.keep_intervals([[left, right]], simplify=False)

if c_extension == True:
  egrm, vargrm, egrm_tl = varGRM_C(trees, log = None, rlim = rlim, alim = alim, map_func = gmap, var = run_var, sft = skip_first_tree)
else:
  egrm, vargrm, egrm_tl = varGRM(trees, log = None, rlim = rlim, alim = alim, map_func = gmap, var = run_var, sft = skip_first_tree)

np.save(output + ".npy", egrm)
np.save(output + "_tl.npy", egrm_tl)
if run_var == True:
  np.save(output + "_var.npy", vargrm)
