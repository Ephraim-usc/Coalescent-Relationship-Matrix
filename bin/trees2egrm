#!/usr/bin/env python

### importing packages
import argparse
import math
import sys

import numpy as np
import pandas as pd
import tskit

### importing egrm
from egrm import varGRM, varGRM_C, Gmap


def to_gcta_format(K, mu, prefix_path):
    # todo: write out 3 files in GCTA format
    # K = prefix_path.grm.bin; relatedness diagonal + lower diagonal
    # mu = prefix_path.grm.N.bin; number of shared mutations between individuals on diagonal + lower diagonal
    # samples = prefix_path.grm.id; 2 column text = family_id individual_id
    pass


def main(args):
    ### parse arguments
    parser = argparse.ArgumentParser(
        description="Construct eGRM matrix from tree sequence data"
    )
    parser.add_argument("input", type=argparse.FileType("r"), help="Path to ts-kit tree sequence file")
    parser.add_argument(
        "--output", "--o", default=None, type=str, help="output file prefix"
    )
    parser.add_argument(
        "--c_extension", "--c", help="acceleration by C extension", action="store_true"
    )
    parser.add_argument(
        "--skip_first_tree",
        "--sft",
        help="discard the first tree in the tree sequence",
        action="store_true",
    )
    parser.add_argument(
        "--run_var", "--var", help="compute varGRM instead of eGRM", action="store_true"
    )
    parser.add_argument(
        "--genetic_map", "--map", type=str, default=None, help="map file fullname"
    )
    parser.add_argument(
        "--left",
        "--l",
        type=int,
        default=0,
        help="leftmost genomic position to be included",
    )
    parser.add_argument(
        "--right",
        "--r",
        type=int,
        default=math.inf,
        help="rightmost genomic position to be included",
    )
    parser.add_argument("--rlim", type=float, default=0, help="most recent time limit")
    parser.add_argument(
        "--alim", type=float, default=math.inf, help="most ancient time limit"
    )
    parser.add_argument(
        "--output-format",
        choices=["gcta", "numpy"],
        default="numpy",
        help="Output format of eGRM",
    )

    args = parser.parse_args(args)

    if args.output is None:
        output = "egrm"
    else:
        output = args.output

    ###
    trees = tskit.load(args.input + ".trees")
    gmap = Gmap(args.genetic_map)

    if args.c_extension:
        construct = varGRM_C
    else:
        construct = varGRM

    egrm, vargrm, egrm_mu = construct(
        trees,
        log=None,
        rlim=args.rlim,
        alim=args.alim,
        left=args.left,
        right=args.right,
        gmap=gmap,
        var=args.run_var,
        sft=args.skip_first_tree,
    )

    if args.output_format == "numpy":
        np.save(output + ".npy", egrm)
        np.save(output + "_mu.npy", egrm_mu)
        if args.run_var:
            np.save(output + "_var.npy", vargrm)
    elif args.output_format == "gcta":
        # todo: update to output in GCTA grm format
        pass

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
