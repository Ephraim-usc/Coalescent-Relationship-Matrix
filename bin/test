#!/usr/bin/env python

from egrm import *
import datetime
import tsinfer

N = 100
l = 10000000
name = "tmp"

simulation = simulate(N = N, l = l)
trees = simulation["hapdata"]["tree_sequence"]
variants = simulation["hapdata"]["variants"]
obss = simulation["observations"]["obss"]
genotype_matrix = simulation["hapdata"]["genotype_matrix"]

Z_all = np.transpose(genotype_matrix).astype("float")
Z_all -= Z_all.mean(axis=0)
Z_all /= Z_all.std(axis=0)
K_all = np.dot(Z_all, np.transpose(Z_all)) / Z_all.shape[1]

def meanTMRCA(trees):
  N = trees.num_samples
  buffer = np.zeros([N, N])
  total_l = 0
  for tree in trees.trees():
    buffer_ = np.zeros([N, N])
    for i in range(N):
      for j in range(N):
        buffer_[i, j] += tree.tmrca(i, j)
    buffer_ *= tree.interval[1] - tree.interval[0]
    buffer += buffer_
    total_l += tree.interval[1] - tree.interval[0]
    print(total_l)
  buffer /= total_l
  return buffer

mTMRCA = meanTMRCA(trees)
Km, Km_tl = getEK_trees(trees)
np.savetxt("kall.csv", K_all, delimiter=",")
np.savetxt("mtmrca.csv", mTMRCA, delimiter=",")
np.savetxt("km.csv", Km, delimiter=",")


os.mkdir(name + "_relate")
os.chdir(name + "_relate")
write_relate(simulation, obss, "observed")
relate("observed", name + ".log")
trees_relate = tskit.load("observed.trees")


##############################################

def g(p):
  return 1/(p*(1-p))

def relevant_nodes(tree):
  N = tree.num_samples()
  rel_nodes = []
  for i in list(range(N)):
    c = i
    while not c in rel_nodes:
      if c == -1: 
        break
      rel_nodes.append(c)
      c = tree.parent(c)
  rel_nodes.sort()
  return rel_nodes

def zeta(tree):
  N = tree.num_samples()
  rel_nodes = list(tree.nodes())
  zetas = np.zeros([N, N])
  for c in rel_nodes:
    descendants = list(tree.samples(c))
    n = len(descendants)
    if(n == 0 or n == N):
      continue
    q = (tree.time(tree.parent(c)) - tree.time(c)) * g(n / N)
    zetas[np.ix_(descendants, descendants)] += q
  zetas /= tree.total_branch_length
  return zetas

def affected_nodes(prev_tree, tree):
  buffer = []
  for node in set(prev_tree.nodes()).union(set(tree.nodes())):
    if prev_tree.parent(node) != tree.parent(node):
      buffer.append(node)
    elif sorted(list(prev_tree.samples(node))) != sorted(list(tree.samples(node))):
      buffer.append(node)
  buffer = list(set(buffer))
  return buffer

def zeta_rec(prev_K, tree, prev_tree = None):
  N = tree.num_samples()
  if prev_tree == None:
    tree.prev(); prev_tree = tree.copy(); tree.next()
  K = prev_K * prev_tree.total_branch_length
  affected = affected_nodes(prev_tree, tree)
  
  for node in affected:
    descendants = list(prev_tree.samples(node))
    n = len(descendants)
    if(n == 0 or n == N):
      continue
    time = prev_tree.time(prev_tree.parent(node)) - prev_tree.time(node)
    q = g(n / N)
    K[np.ix_(descendants, descendants)] -= q * time
  
  for node in affected:
    descendants = list(tree.samples(node))
    n = len(descendants)
    if(n == 0 or n == N):
      continue
    time = tree.time(tree.parent(node)) - tree.time(node)
    q = g(n / N)
    K[np.ix_(descendants, descendants)] += q * time
  
  K /= tree.total_branch_length
  return K

def EGRM(trees, num = -1):
  N = trees.num_samples
  buffer = np.zeros([N, N])
  total_tl = 0
  for tree in trees.trees():
    #print(total_tl)
    tl = (tree.interval[1] - tree.interval[0]) * tree.total_branch_length * 1e-8
    total_tl += tl
    K = zeta(tree)
    #print(K[0, 0])
    buffer += K * tl
    num -= 1
    if num == 0:
      break
  buffer /= total_tl
  return buffer, total_tl

def EGRM_rec(trees, num = -1):
  N = trees.num_samples
  buffer = np.zeros([N, N])
  tree = trees.first()
  K = zeta(tree)
  total_tl = (tree.interval[1] - tree.interval[0]) * tree.total_branch_length * 1e-8
  while tree.next():
    tl = (tree.interval[1] - tree.interval[0]) * tree.total_branch_length * 1e-8
    total_tl += tl
    K = zeta_rec(K, tree)
    buffer += K * tl
    num -= 1
    if num == 0:
      break
  buffer /= total_tl
  return buffer, total_tl

def EGRM_obs(trees, loci):
  N = trees.num_samples
  total_tl = 0
  buffer = np.zeros([N, N])
  tree = trees.first()
  i = 0
  while i < len(loci):
    while tree.interval[0] >= loci[i]:
      i += 1
      if i >= len(loci):
        return buffer/total_tl, total_tl
    while tree.interval[1] < loci[i]:
      tree.next()
    tl = (tree.interval[1] - tree.interval[0]) * tree.total_branch_length * 1e-8
    total_tl += tl
    K = zeta(tree)
    buffer += K * tl; #print(str(tree.index) + " " + str(K[0, 0]))
    tree.next(); i += 1
  return buffer/total_tl, total_tl

def EGRM_obs_rec(trees, loci):
  N = trees.num_samples
  buffer = np.zeros([N, N])
  tree = trees.first()
  i = 0
  while tree.interval[1] < loci[i]:
    tree.next()
  tl = (tree.interval[1] - tree.interval[0]) * tree.total_branch_length * 1e-8
  total_tl = tl
  K = zeta(tree); buffer += K * tl; #print(str(tree.index) + " " + str(K[0, 0]))
  prev_tree = tree.copy(); i += 1
  while i < len(loci):
    while tree.interval[0] >= loci[i]:
      i += 1
      if i >= len(loci):
        return buffer/total_tl, total_tl
    while tree.interval[1] < loci[i]:
      tree.next()
    tl = (tree.interval[1] - tree.interval[0]) * tree.total_branch_length * 1e-8
    total_tl += tl
    K = zeta_rec(K, tree, prev_tree = prev_tree); buffer += K * tl; #print(str(tree.index) + " " + str(K[0, 0]))
    prev_tree = tree.copy()
    tree.next(); i += 1
  return buffer/total_tl, total_tl



import sys, traceback

class Suppressor(object):
  def __enter__(self):
    self.stdout = sys.stdout
    sys.stdout = self
  def __exit__(self, type, value, traceback):
    sys.stdout = self.stdout
  def write(self, x): 
    pass

def print_results(string):
  out_file = open(name, "a")
  out_file.write(str(string) + "\n")
  out_file.close()

import datetime

for o_r in [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]:
  hapdata = simulate_hapdata(N = 1000, l = 300000)
  trees = hapdata["tree_sequence"]
  observations = simulate_observations(hapdata, obs_ratio = o_r)
  variants = hapdata["variants"]
  obss = observations["obss"]
  
  A = datetime.datetime.now()
  tmp1 = EGRM_obs(trees, variants[obss])
  B = datetime.datetime.now()
  tmp2 = EGRM_obs_rec(trees, variants[obss])
  C = datetime.datetime.now()
  print_results(o_r)
  print_results(B-A)
  print_results(C-B)
  print_results(" ")

  
for o_r in [0.01, 0.2, 0.4, 0.6, 0.8, 1]:
  hapdata = simulate_hapdata(N = 10000, l = 300000)
  trees = hapdata["tree_sequence"]
  observations = simulate_observations(hapdata, obs_ratio = o_r)
  variants = hapdata["variants"]
  obss = observations["obss"]
  
  A = datetime.datetime.now()
  tmp1 = EGRM_obs(trees, variants[obss])
  B = datetime.datetime.now()
  tmp2 = EGRM_obs_rec(trees, variants[obss])
  C = datetime.datetime.now()
  print(o_r)
  print(B-A)
  print(C-B)
  print(" ")



#################
from egrm.simulation import *
import tsinfer
import tsdate
from memory_profiler import memory_usage

def f():
  N = 20000
  l = 1000000
  population_configurations = [msprime.PopulationConfiguration(sample_size = N, initial_size = N_EU, growth_rate = r_EU)]
  demo_events = [msprime.PopulationParametersChange(time=T_EU_AS, initial_size = N_B, growth_rate=0),
                 msprime.PopulationParametersChange(time=T_B, initial_size = N_AF, growth_rate=0),
                 msprime.PopulationParametersChange(time=T_AF, initial_size = N_A, growth_rate=0)]
  tree_sequence = msprime.simulate(length = l, population_configurations = population_configurations, 
                                   recombination_rate = recomb_rate, mutation_rate = mutation_rate, 
                                   demographic_events = demo_events)
  variants = np.array([v.position for v in tree_sequence.variants()])
  M = len(variants)
  sample_data = tsinfer.SampleData(sequence_length = l)
  for i in range(M):
    sample_data.add_site(variants[i], simulation["hapdata"]["genotype_matrix"][obs, :])

def f():
  N = 10000; l = 1000000
  hapdata = simulate_hapdata(N = N, l = l)
  M = hapdata["M"]
  variants = hapdata["variants"]
  sample_data = tsinfer.SampleData(sequence_length = l)
  for i in range(M):
    sample_data.add_site(variants[i], hapdata["genotype_matrix"][i, :])
  trees_tsinfer = tsinfer.infer(sample_data)
  trees_tsdate = tsdate.date(trees_tsinfer, Ne=10000, mutation_rate=1e-8)
  return hapdata["tree_sequence"], trees_tsinfer, trees_tsdate

mem_usage = memory_usage(f)
trees, trees_tsinfer, trees_tsdate = f()

def relevant_nodes(tree):
  N = tree.num_samples()
  rel_nodes = []
  for i in list(range(N)):
    c = i
    while not c in rel_nodes:
      if c == -1: 
        break
      rel_nodes.append(c)
      c = tree.parent(c)
  rel_nodes.sort()
  return rel_nodes

def TMRCA(tree):
  N = tree.num_samples()
  rel_nodes = np.array(relevant_nodes(tree))
  times = [tree.time(node) for node in rel_nodes]
  rel_nodes = rel_nodes[np.flip(np.argsort(times))]
  tmrca = np.zeros([N, N])
  for c in rel_nodes:
    descendants = list(tree.samples(c))
    n = len(descendants)
    if(n == 0 or n == N):
      continue
    q = tree.time(c)
    tmrca[np.ix_(descendants, descendants)] = q
  return tmrca

def compare(trees1, trees2, n = 100):
  l = trees1.last().interval[1]
  loci = np.random.randint(0, l, n)
  diffs = []
  for locus in loci:
    tree1 = trees1.at(locus)
    tree2 = trees2.at(locus)
    tmrca1 = TMRCA(tree1)
    tmrca2 = TMRCA(tree2)
    tmrca1 /= tmrca1.mean()
    tmrca2 /= tmrca2.mean()
    diffs.append(np.abs(tmrca2 - tmrca1).mean())
  return diffs
    
    
