#!/usr/bin/env python

### importing packages
import argparse
import os
import pandas as pd
import pickle
import datetime
import tsinfer
import tsdate

### importing egrm
from egrm import *

### parse arguments
parser=argparse.ArgumentParser()

parser.add_argument('--out', type = str, help='output directory')
parser.add_argument('--name', type = str, help='output file name')
parser.add_argument('--all', help='run all steps', action='store_true')
#parser.add_argument('--gcta', help='run gcta analysis', action='store_true')
parser.add_argument('--relate', help='run relate tree reconstruction', action='store_true')
parser.add_argument('--tsinfer', help='run tsinfer tree reconstruction', action='store_true')
parser.add_argument('--l', type = int, help='chromosome length')
parser.add_argument('--N', type = int, help='population size')
parser.add_argument('--mutation_rate', type = float, help='mutation rate')
parser.add_argument('--recomb_rate', type = float, help='recombination rate')
parser.add_argument('--cas_ratio', type = float, help='M_cas / M')
parser.add_argument('--obs_ratio', type = float, help='M_obs / M_5')
parser.add_argument('--h2g', type = float, help='heritability')
parser.add_argument('--Alpha', type = float, help='Alpha -- causal probability parameter')
parser.add_argument('--Beta', type = float, help='Beta -- observation probability parameter')

args = vars(parser.parse_args())
args = dict((k,v) for k,v in args.items() if v is not None)

out = args.pop("out")
if not os.path.exists(out):
  os.mkdir(out)
os.chdir(out)

name = args.pop("name")
run_all = args.pop("all")
run_relate = args.pop("relate")
run_tsinfer = args.pop("tsinfer")

if run_all:
  run_relate = True
  run_tsinfer = True

def print_results(string):
  out_file = open(name, "a")
  out_file.write(str(string) + "\n")
  out_file.close()

def print_logs(string):
  out_file = open(name + ".log", "a")
  out_file.write(str(string) + "\n")
  out_file.close()

### run workflow
print_results(str(datetime.datetime.now()))
print_results(args)

print_logs("simulating ...")
simulation = simulate(**args)
make_diploid(simulation)

trees = simulation["hapdata"]["trees"]
N = simulation["parameters"]["N"]
M = simulation["hapdata"]["M"]
loci = simulation["hapdata"]["loci"]
M_cas = simulation["phenotypes"]["M_cas"]
M_obs = simulation["observations"]["M_obs"]
M_5 = simulation["observations"]["M_5"]
cass = simulation["phenotypes"]["cass"]
obss = simulation["observations"]["obss"]

### K_all and Km
print_logs("computing K_all ...")

def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

K_all = np.zeros((N, N))
for idx in chunks(list(range(M)), 5000):
  Z = getX(simulation["hapdata"], idx).astype("float")
  Z -= Z.mean(axis=0); Z /= Z.std(axis=0)
  K_all += np.dot(Z, np.transpose(Z))
  del Z

K_all /= M
simulation["Ks"]["K_all"] = K_all
simulation["Ks"]["K_all_M"] = simulation["hapdata"]["M"]


print_logs("computing mTMRCA ...")
flags_obs = get_flags(trees, variants[obss], file = open(name + ".log", "a"))
mtmrca, mtmrca_l = mTMRCA(trees, flags_obs, file = open(name + ".log", "a"))
simulation["Ks"]["mTMRCA"] = mtmrca
simulation["Ks"]["mTMRCA_l"] = mtmrca_l

print_logs("computing Km ...")
#flags_obs = get_flags(trees, variants[obss], file = open(name + ".log", "a"))
Km, Km_tl = getEK_trees(trees, flags_obs, file = open(name + ".log", "a"))
simulation["Ks"]["Km"] = Km
simulation["Ks"]["Km_tl"] = Km_tl

'''
if run_gcta:
  print_logs("running gcta ...")
  os.mkdir(name + "_gcta")
  os.chdir(name + "_gcta")
  write_plink(simulation, obss, "observed")
  write_plink(simulation, cass, "causal")
  gcta64("observed", name + ".log")
  gcta64("causal", name + ".log")
  os.chdir("..")
'''

### Kms
if run_relate:
  print_logs("running relate ...")
  os.mkdir(name + "_relate")
  os.chdir(name + "_relate")
  
  write_relate(simulation, obss, "observed")
  cmd_relate("observed", name + ".log")
  trees_relate = tskit.load("observed.trees")
  
  print_logs("computing Km_relate ...")
  EK_relate, EK_relate_tl = eGRM(trees_relate, file = open(name + ".log", "a"))
  os.chdir("..")
  
  simulation["Ks"]["EK_relate"] = EK_relate
  simulation["Ks"]["EK_relate_tl"] = EK_relate_tl
      
if run_tsinfer:
  print_logs("running tsinfer ...")
  os.mkdir(name + "_tsinfer")
  os.chdir(name + "_tsinfer")
  
  write_tsinfer(simulation, obss, "observed")
  cmd_tsinfer("observed", name + ".log")
  trees_tsinfer = tskit.load("observed.trees")
  
  print_logs("computing Km_tsinfer ...")
  EK_tsinfer, EK_tsinfer_tl = eGRM(trees_tsinfer, file = open(name + ".log", "a"))
  
  print_logs("computing Km_tsdate ...")
  trees_tsdate = tsdate.date(trees_tsinfer, Ne=10000, mutation_rate=1e-8)
  EK_tsdate, EK_tsdate_tl = eGRM(trees_tsdate, file = open(name + ".log", "a"))
  os.chdir("..")
  
  simulation["Ks"]["EK_tsinfer"] = EK_tsinfer
  simulation["Ks"]["EK_tsinfer_tl"] = EK_tsinfer_tl
  simulation["Ks"]["EK_tsdate"] = EK_tsdate
  simulation["Ks"]["EK_tsdate_tl"] = EK_tsdate_tl

print_logs("testing performances ...")
test(simulation)
print_results(summary(simulation))
print_results("\n" + str(datetime.datetime.now()))

### save
trees = simulation["hapdata"].pop("trees")
pickle.dump(simulation, open("{}.p".format(name), "wb"))
trees.dump("{}.trees".format(name))


