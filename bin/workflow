#!/usr/bin/env python

### importing packages
import argparse
import os
import pandas as pd
import pickle

### importing egrm
from egrm import *

### parse arguments
parser=argparse.ArgumentParser()

parser.add_argument('--out', type = str, help='output directory')
parser.add_argument('--name', type = str, help='output file name')
parser.add_argument('--gcta', help='run gcta analysis', action='store_true')
parser.add_argument('--relate', help='run relate tree reconstruction', action='store_true')
parser.add_argument('--l', type = int, help='chromosome length')
parser.add_argument('--N', type = int, help='population size')
parser.add_argument('--mutation_rate', type = float, help='mutation rate')
parser.add_argument('--recomb_rate', type = float, help='recombination rate')
parser.add_argument('--cas_ratio', type = float, help='M_cas / M')
parser.add_argument('--obs_ratio', type = float, help='M_obs / M_5')
parser.add_argument('--h2g', type = float, help='heritability')
parser.add_argument('--Alpha', type = float, help='Alpha -- causal probability parameter')
parser.add_argument('--Beta', type = float, help='Beta -- observation probability parameter')

args = vars(parser.parse_args())
args = dict((k,v) for k,v in args.items() if v is not None)

out = args["out"]
if not os.path.exists(out):
  os.mkdir(out)
os.chdir(out)
del args['out']

name = args["name"]
del args['name']

run_gcta = args["gcta"]
del args['gcta']

run_relate = args["relate"]
del args['relate']

def print_results(string):
  out_file = open(name, "a")
  out_file.write(str(string) + "\n")
  out_file.close()

def print_logs(string):
  out_file = open(name + ".log", "a")
  out_file.write(str(string) + "\n")
  out_file.close()

### run workflow
print_results(args)

print_logs("simulating ...")
simulation = simulate(**args)
make_diploid(simulation)

trees = simulation["hapdata"]["tree_sequence"]
N = simulation["parameters"]["N"]
M = simulation["hapdata"]["M"]
variants = simulation["hapdata"]["variants"]
M_cas = simulation["phenotypes"]["M_cas"]
M_obs = simulation["observations"]["M_obs"]
M_5 = simulation["observations"]["M_5"]
cass = simulation["phenotypes"]["cass"]
obss = simulation["observations"]["obss"]

print_logs("computing Km ...")
flags_obs = get_flags(trees, variants[obss], file = open(name + ".log", "a"))
Km, Km_tl = getEK_trees(trees, flags_obs, file = open(name + ".log", "a"))

if run_gcta:
  print_logs("running gcta ...")
  os.mkdir(name + "_gcta")
  os.chdir(name + "_gcta")
  write_plink(simulation, obss, "observed")
  write_plink(simulation, cass, "causal")
  gcta64("observed", name + ".log")
  gcta64("causal", name + ".log")
  os.chdir("..")

if run_relate:
  print_logs("running relate ...")
  os.mkdir(name + "_relate")
  os.chdir(name + "_relate")
  write_relate(simulation, obss, "observed")
  relate("observed", name + ".log")
  trees_relate = tskit.load("observed.trees")
  print_logs("computing Km_relate ...")
  Km_relate, Km_relate_tl = getEK_trees(trees_relate, file = open(name + ".log", "a"))
  os.chdir("..")
  if run_gcta:
    os.chdir(name + "_gcta")
    write_grm(Km_relate, Km_relate_tl, "relate")
    gcta64reml("relate", "observed", name + ".log")
    os.chdir("..")
else:
  Km_relate, Km_relate_tl = Km, Km_tl

simulation["Ks"]["Km"] = Km
simulation["Ks"]["Km_tl"] = Km_tl
simulation["Ks"]["Km_relate"] = Km_relate
simulation["Ks"]["Km_relate_tl"] = Km_relate_tl

test(simulation)
print_results(summary(simulation))

### save
trees = simulation["hapdata"].pop("tree_sequence")
pickle.dump(simulation, open("{}.p".format(name), "wb"))
trees.dump("{}.trees".format(name))

### output
'''
print_results("K_cas BLUP: " + str(a.mean().round(3)) + " +- " + str(a.std().round(3)))
print_results("K_obs BLUP: " + str(b.mean().round(3)) + " +- " + str(b.std().round(3)))
print_results("Km BLUP: " + str(c.mean().round(3)) + " +- " + str(c.std().round(3)))
print_results("Km_relate BLUP: " + str(d.mean().round(3)) + " +- " + str(d.std().round(3)))
'''
