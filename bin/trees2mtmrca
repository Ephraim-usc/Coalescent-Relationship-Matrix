#!/usr/bin/env python

### importing packages
import argparse
import math

### importing egrm
from egrm import mTMRCA, mTMRCA_C, read_trees, write_grm, read_map_func

### parse arguments
parser=argparse.ArgumentParser()
parser.add_argument('--input', type = str, help='input file prefix')
parser.add_argument('--output', type = str, help='output file prefix')
parser.add_argument('--map', type = str, help='map file fullname')
parser.add_argument('--format', type = str, help='format of output')
parser.add_argument('--c', help='acceleration by C extension', action='store_true')
parser.add_argument('--left', type = int, help='leftmost genomic position to be included')
parser.add_argument('--right', type = int, help='rightmost genomic position to be included')

args = vars(parser.parse_args())
args = dict((k,v) for k,v in args.items() if v is not None)

input = args["input"]
left = args.get("left", None)
right = args.get("right", None)

if args.get("output", None) == None:
  output = input + ".e"
else:
  output = args["output"]

if args.get("map", None) == None:
  map = None
else:
  map = read_map_func(args["map"])

if args.get("format", None) == None:
  format = "GCTA"
else:
  format = "pickle"

c_extension = args.pop("c")

### 
trees = read_trees(input + ".trees")

if left != None and right != None:
  left = max(0, left)
  right = min(trees.sequence_length, right)
  trees = trees.keep_intervals([[left, right]], simplify=False)

if c_extension == True:
  mtmrca, mtmrca_l = mTMRCA_C(trees, file = None, A = A, B = B, map_func = map)
else:
  mtmrca, mtmrca_l = mTMRCA(trees, file = None, A = A, B = B, map_func = map)

write_grm(mtmrca, mtmrca_l, output, format)
